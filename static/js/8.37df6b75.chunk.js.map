{"version":3,"file":"static/js/8.37df6b75.chunk.js","mappings":"mQAAQA,EAASC,EAAQ,IAAjBD,KAgBR,EAduB,WACnB,OACI,2BACI,mDACA,yBACI,SAACA,EAAD,CAAME,GAAG,OAAT,qBAEJ,yBACI,SAACF,EAAD,CAAME,GAAG,UAAT,yBAIf,ECCD,EAfkB,SAAC,GAAkC,IAAD,IAAhCC,KAAOC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACpC,OAAQ,4BACJ,gBACIC,IAAG,yCAAoCD,EAAME,eAC7CC,IAAKH,EAAMI,SACf,wBAAKJ,EAAMI,SACX,wCAAgBJ,EAAMK,iBACtB,sCACA,uBAAIL,EAAMM,YACV,oCACA,uBAAIP,MAGX,EC+BD,EAtCqB,WAAO,IAAD,IACfQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOT,EAAP,KAAcU,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,QAAOH,GAc/B,IAZAI,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAE4BC,EAAAA,EAAAA,IAAaT,GAFzC,OAEcP,EAFd,OAGQU,EAASV,GAHjB,gDAKQiB,QAAQC,IAAI,UALpB,0DADY,uBAAC,WAAD,wBASZC,EACH,GAAE,CAACZ,KAECP,EACD,OAAO,KAGX,IAAMD,EAAcC,EAAMoB,OAAOC,KAAI,SAACrB,GAAD,OAAWA,EAAMsB,IAAjB,IAAuBC,KAAK,KAEjE,OACI,iCACI,SAAC,EAAA5B,KAAD,CAAME,GAAE,oBAAEgB,EAAgBW,QAAQC,aAA1B,aAAE,EAA+BC,YAAjC,QAAyC,IAAjD,mBACA,SAAC,EAAD,CAAW5B,KAAM,CAACC,YAAAA,EAAaC,MAAAA,MAC/B,4BACI,SAAC,EAAD,KACI,SAAC,EAAA2B,SAAD,CAAUC,UAAU,wCAApB,UACI,SAAC,KAAD,WAKvB,C,+LCxCKC,EAAW,+BACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACGC,EAAU,CACZC,OAAQ,CACJC,QAASJ,IAHd,SAOoBK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,uBAA4CG,GAPhE,cAOGI,EAPH,yBAQIA,EAASC,KAAKC,SARlB,kEAWA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BuB,GAA5B,gFACGP,EAAU,CACZC,OAAQ,CACJC,QAASJ,IAHd,SAOoBK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,kBAA+BU,GAAYP,GAP/D,cAOGI,EAPH,yBAQIA,EAASC,MARb,kEAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,gFACGP,EAAU,CACZC,OAAQ,CACJC,QAASJ,IAHd,SAMoBK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,kBAA+BU,EAA/B,YAAmDP,GANvE,cAMGI,EANH,yBAOIA,EAASC,MAPb,kEAUA,IAAMI,EAAc,mCAAG,WAAOF,GAAP,gFACpBP,EAAU,CACZC,OAAQ,CACJC,QAASJ,IAHS,SAMHK,EAAAA,EAAAA,IAAA,UAAaN,EAAb,kBAA+BU,EAA/B,YAAmDP,GANhD,cAMpBI,EANoB,yBAOnBA,EAASC,KAAKC,SAPK,2CAAH,sDAUdI,EAAS,mCAAG,WAAOC,GAAP,gFACfX,EAAU,CACZC,OAAQ,CACJC,QAASJ,EACTa,MAAAA,IAJa,SAOER,EAAAA,EAAAA,IAAA,UAAaN,EAAb,iBAAsCG,GAPxC,cAOfI,EAPe,yBAQdA,EAASC,KAAKC,SARA,2CAAH,qD","sources":["components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails/MovieDesc/MovieDesc.jsx","pages/MovieDetails/MovieDetails.jsx","services/app.js"],"sourcesContent":["const { Link } = require(\"react-router-dom\")\n\nconst AdditionalInfo = () => {\n    return (\n        <ul>\n            <p>Additional information</p>\n            <li>\n                <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n                <Link to=\"reviews\">Reviews</Link>\n            </li>\n        </ul>\n    );\n};\n\nexport default AdditionalInfo;","const MovieDesc = ({desc: {genresNames, movie}}) => {\n    return (<div>\n        <img\n            src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\n            alt={movie.title} />\n        <h2>{movie.title}</h2>\n        <p>User scode: {movie.vote_average}</p>\n        <h2>Overview</h2>\n        <p>{movie.overview}</p>\n        <h2>Genres</h2>\n        <p>{genresNames}</p>\n    </div>\n    );\n};\n\nexport default MovieDesc;","import { useEffect, useState, useRef, Suspense } from \"react\";\nimport { Link, useParams, Outlet, useLocation } from \"react-router-dom\";\nimport { getMovieById } from \"services/app\";\nimport AdditionalInfo from \"components/AdditionalInfo\";\nimport MovieDesc from \"./MovieDesc\";\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n    const location = useLocation();\n    const currentLocation = useRef(location);\n\n    useEffect(() => {\n        async function getMovieDetails() {\n            try {\n                const movie = await getMovieById(movieId);\n                setMovie(movie);\n            } catch (error) {\n                console.log('Error!')\n            }\n        }\n        getMovieDetails();\n    }, [movieId]);\n\n    if (!movie) {\n        return null;\n    };\n\n    const genresNames = movie.genres.map((movie) => movie.name).join(' ');\n\n    return (\n        <>\n            <Link to={currentLocation.current.state?.home ?? '/'}>Back</Link>\n            <MovieDesc desc={{genresNames, movie}} />\n            <div>\n                <AdditionalInfo />\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Outlet />\n                    </Suspense>\n            </div>\n        </>\n    );\n};\n\nexport default MovieDetails;","import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e7011c858e160819547da18edbe0186b';\n\nexport async function getTrendingMovies() {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        },\n    };\n\n    const response = await axios.get(`${BASE_URL}/trending/movie/day`, options);\n    return response.data.results;\n};\n\nexport async function getMovieById(movie_id) {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        },\n    };\n\n    const response = await axios.get(`${BASE_URL}/movie/${movie_id}`, options);\n    return response.data;\n};\n\nexport async function getMovieCastById(movie_id) {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        },\n    };\n    const response = await axios.get(`${BASE_URL}/movie/${movie_id}/credits`, options);\n    return response.data;\n};\n\nexport const getReviewsById = async (movie_id) => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        },\n    };\n    const response = await axios.get(`${BASE_URL}/movie/${movie_id}/reviews`, options);\n    return response.data.results;\n};\n\nexport const findFilms = async (query) => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n            query,\n        },\n    };\n    const response = await axios.get(`${BASE_URL}/search/movie`, options);\n    return response.data.results;\n};"],"names":["Link","require","to","desc","genresNames","movie","src","backdrop_path","alt","title","vote_average","overview","movieId","useParams","useState","setMovie","location","useLocation","currentLocation","useRef","useEffect","getMovieById","console","log","getMovieDetails","genres","map","name","join","current","state","home","Suspense","fallback","BASE_URL","API_KEY","getTrendingMovies","options","params","api_key","axios","response","data","results","movie_id","getMovieCastById","getReviewsById","findFilms","query"],"sourceRoot":""}